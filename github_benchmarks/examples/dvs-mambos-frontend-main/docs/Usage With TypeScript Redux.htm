<!DOCTYPE html>
<html dir="ltr" class="docs-wrapper docs-doc-page docs-version-current plugin-docs plugin-id-default docs-doc-id-usage/usage-with-typescript" data-theme="light" data-rh="lang,dir,class" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<meta name="generator" content="Docusaurus v2.2.0">
<title>Usage With TypeScript | Redux</title><meta data-rh="true" property="og:image" content="https://redux.js.org/img/redux-logo-landscape.png"><meta data-rh="true" name="twitter:image" content="https://redux.js.org/img/redux-logo-landscape.png"><meta data-rh="true" name="docusaurus_locale" content="en"><meta data-rh="true" name="docsearch:language" content="en"><meta data-rh="true" name="twitter:card" content="summary"><meta data-rh="true" name="docusaurus_version" content="current"><meta data-rh="true" name="docusaurus_tag" content="docs-default-current"><meta data-rh="true" name="docsearch:version" content="current"><meta data-rh="true" name="docsearch:docusaurus_tag" content="docs-default-current"><link data-rh="true" rel="icon" href="https://redux.js.org/img/favicon/favicon.ico"><link data-rh="true" rel="preconnect" href="https://yuqhc5ocw0-dsn.algolia.net/" crossorigin="anonymous"><link rel="preconnect" href="https://www.google-analytics.com/">
<script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)},ga.l=+new Date,ga("create","UA-130598673-1","auto"),ga("send","pageview")</script>
<script async="" src="Usage%20With%20TypeScript%20Redux_files/analytics.js"></script>


<link rel="search" type="application/opensearchdescription+xml" title="Redux" href="https://redux.js.org/opensearch.xml"><link rel="stylesheet" href="Usage%20With%20TypeScript%20Redux_files/styles.68aab04a.css">
<link rel="preload" href="Usage%20With%20TypeScript%20Redux_files/runtime~main.c942408f.js" as="script">
<link rel="preload" href="Usage%20With%20TypeScript%20Redux_files/main.aecab9b3.js" as="script">
<meta name="viewport" content="width=device-width, initial-scale=1.0" data-rh="true"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/5d5abd3d.d7668199.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/6cf0a46d.945b4e52.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/cc5eedff.76fb09ca.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/83a94416.645b5912.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/8281e42f.706502fd.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b01a8152.a9793f7f.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/f14fd549.88b64dda.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/7005c2b0.f5e47935.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b67e346f.2f0703c9.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/0df8a05e.dfd17607.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1a9771aa.5f6e8f6a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/41f6d251.3efee4af.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/5ab55e80.52304307.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/11938ad8.569e3126.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/fa5fc421.0c27899b.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/f81b1e43.90be1e54.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/052f08fe.c4dedf93.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/93a592e4.3dc3a860.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/385bf224.f7e7ff01.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/3fb85e0e.66347311.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1f172ca5.5bcbf8de.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/3573ab49.821b5b73.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/eec52e28.fe7ad114.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/4244f4d4.9c7dab28.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/0ee6ee39.7cba0cd1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/664b7567.0f0176c9.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/38229790.87563d61.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/827969cf.6cbb88b9.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/29992961.f11f96ad.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a7ad3ad9.8b16b613.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/2a802d50.92d99503.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/89820cb0.47bc79b7.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/ffef426b.02161e86.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/54751c50.cc65e214.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/e8d21a3d.84784ed4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/2274d8dc.957fb9b8.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/aafc13fc.a8f6e263.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/0f6a3f97.44eadd5b.js"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"><link rel="prefetch" href="https://redux.js.org/assets/js/17896441.09b17157.js"><link rel="prefetch" href="https://redux.js.org/assets/js/96fc8913.2b4907fd.js"><link rel="canonical" href="https://redux.js.org/usage/usage-with-typescript" data-rh="true"><link rel="alternate" href="https://redux.js.org/usage/usage-with-typescript" hreflang="en" data-rh="true"><link rel="alternate" href="https://redux.js.org/usage/usage-with-typescript" hreflang="x-default" data-rh="true"><meta property="og:url" content="https://redux.js.org/usage/usage-with-typescript" data-rh="true"><meta property="og:title" content="Usage With TypeScript | Redux" data-rh="true"><meta name="description" content="- Standard patterns for setting up a Redux app with TypeScript" data-rh="true"><meta property="og:description" content="- Standard patterns for setting up a Redux app with TypeScript" data-rh="true"><link rel="prefetch" href="https://redux.js.org/assets/js/c4f5d8e4.69b6bdf4.js"><link rel="prefetch" href="https://redux.js.org/assets/js/b05b1389.8da79438.js"><link rel="prefetch" href="https://redux.js.org/assets/js/1be78505.16c2c5c1.js"><link rel="prefetch" href="https://redux.js.org/assets/js/a62804cc.15f99eaa.js"><link rel="prefetch" href="https://redux.js.org/assets/js/935f2afb.c6b5808a.js"></head>
<body class="" data-rh="class" style="overflow: visible;">
<script>!function(){function t(t){document.documentElement.setAttribute("data-theme",t)}var e=function(){var t=null;try{t=localStorage.getItem("theme")}catch(t){}return t}();t(null!==e?e:"light")}()</script><div id="__docusaurus"><div role="region" aria-label="Skip to main content"><a class="skipToContent_fXgn" href="#docusaurus_skipToContent_fallback">Skip to main content</a></div><nav class="navbar navbar--fixed-top"><div class="navbar__inner"><div class="navbar__items"><button aria-label="Toggle navigation bar" aria-expanded="false" class="navbar__toggle clean-btn" type="button"><svg width="30" height="30" viewBox="0 0 30 30" aria-hidden="true"><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" d="M4 7h22M4 15h22M4 23h22"></path></svg></button><a class="navbar__brand" href="https://redux.js.org/"><div class="navbar__logo"><img src="Usage%20With%20TypeScript%20Redux_files/redux.svg" alt="Redux Logo" class="themedImage_ToTc themedImage--light_HNdA"></div><b class="navbar__title text--truncate">Redux</b></a></div><div class="navbar__items navbar__items--right"><a class="navbar__item navbar__link" href="https://redux.js.org/introduction/getting-started">Getting Started</a><a class="navbar__item navbar__link" href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts">Tutorial</a><a aria-current="page" class="navbar__item navbar__link navbar__link--active" href="https://redux.js.org/usage/">Usage Guide</a><a aria-current="page" class="navbar__item navbar__link navbar__link--active" href="https://redux.js.org/api/api-reference">API</a><a class="navbar__item navbar__link" href="https://redux.js.org/faq">FAQ</a><a aria-current="page" class="navbar__item navbar__link navbar__link--active" href="https://redux.js.org/style-guide/">Best Practices</a><a href="https://www.github.com/reduxjs/redux" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link">GitHub<svg width="13.5" height="13.5" aria-hidden="true" viewBox="0 0 24 24" class="iconExternalLink_nPIU"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></svg></a><a class="navbar__item navbar__link" href="https://redux.js.org/introduction/getting-started#help-and-discussion">Need help?</a><div class="toggle_vylO colorModeToggle_DEke"><button class="clean-btn toggleButton_gllP" type="button" title="Switch between dark and light mode (currently light mode)" aria-label="Switch between dark and light mode (currently light mode)" aria-live="polite"><svg viewBox="0 0 24 24" width="24" height="24" class="lightToggleIcon_pyhR"><path fill="currentColor" d="M12,9c1.65,0,3,1.35,3,3s-1.35,3-3,3s-3-1.35-3-3S10.35,9,12,9 M12,7c-2.76,0-5,2.24-5,5s2.24,5,5,5s5-2.24,5-5 S14.76,7,12,7L12,7z M2,13l2,0c0.55,0,1-0.45,1-1s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S1.45,13,2,13z M20,13l2,0c0.55,0,1-0.45,1-1 s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S19.45,13,20,13z M11,2v2c0,0.55,0.45,1,1,1s1-0.45,1-1V2c0-0.55-0.45-1-1-1S11,1.45,11,2z M11,20v2c0,0.55,0.45,1,1,1s1-0.45,1-1v-2c0-0.55-0.45-1-1-1C11.45,19,11,19.45,11,20z M5.99,4.58c-0.39-0.39-1.03-0.39-1.41,0 c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0s0.39-1.03,0-1.41L5.99,4.58z M18.36,16.95 c-0.39-0.39-1.03-0.39-1.41,0c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0c0.39-0.39,0.39-1.03,0-1.41 L18.36,16.95z M19.42,5.99c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06c-0.39,0.39-0.39,1.03,0,1.41 s1.03,0.39,1.41,0L19.42,5.99z M7.05,18.36c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06 c-0.39,0.39-0.39,1.03,0,1.41s1.03,0.39,1.41,0L7.05,18.36z"></path></svg><svg viewBox="0 0 24 24" width="24" height="24" class="darkToggleIcon_wfgR"><path fill="currentColor" d="M9.37,5.51C9.19,6.15,9.1,6.82,9.1,7.5c0,4.08,3.32,7.4,7.4,7.4c0.68,0,1.35-0.09,1.99-0.27C17.45,17.19,14.93,19,12,19 c-3.86,0-7-3.14-7-7C5,9.07,6.81,6.55,9.37,5.51z M12,3c-4.97,0-9,4.03-9,9s4.03,9,9,9s9-4.03,9-9c0-0.46-0.04-0.92-0.1-1.36 c-0.98,1.37-2.58,2.26-4.4,2.26c-2.98,0-5.4-2.42-5.4-5.4c0-1.81,0.89-3.42,2.26-4.4C12.92,3.04,12.46,3,12,3L12,3z"></path></svg></button></div><div class="searchBox_ZlJk"><button type="button" class="DocSearch DocSearch-Button" aria-label="Search"><span class="DocSearch-Button-Container"><svg width="20" height="20" class="DocSearch-Search-Icon" viewBox="0 0 20 20"><path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg><span class="DocSearch-Button-Placeholder">Search</span></span><span class="DocSearch-Button-Keys"><kbd class="DocSearch-Button-Key"><svg width="15" height="15" class="DocSearch-Control-Key-Icon"><path d="M4.505 4.496h2M5.505 5.496v5M8.216 4.496l.055 5.993M10 7.5c.333.333.5.667.5 1v2M12.326 4.5v5.996M8.384 4.496c1.674 0 2.116 0 2.116 1.5s-.442 1.5-2.116 1.5M3.205 9.303c-.09.448-.277 1.21-1.241 1.203C1 10.5.5 9.513.5 8V7c0-1.57.5-2.5 1.464-2.494.964.006 1.134.598 1.24 1.342M12.553 10.5h1.953" stroke-width="1.2" stroke="currentColor" fill="none" stroke-linecap="square"></path></svg></kbd><kbd class="DocSearch-Button-Key">K</kbd></span></button></div></div></div><div role="presentation" class="navbar-sidebar__backdrop"></div></nav><div id="docusaurus_skipToContent_fallback" class="main-wrapper mainWrapper_z2l0 docsWrapper_BCFX"><button aria-label="Scroll back to top" class="clean-btn theme-back-to-top-button backToTopButton_sjWU" type="button"></button><div class="docPage__5DB"><aside class="theme-doc-sidebar-container docSidebarContainer_b6E3"><div class="sidebar_njMd"><nav class="menu thin-scrollbar menu_SIkG"><ul class="theme-doc-sidebar-menu menu__list"><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="false">Introduction</a></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="true">Tutorials</a></div><ul style="display:block;overflow:visible;height:auto" class="menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/index">Tutorials Index</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/quick-start">Quick Start</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/typescript-quick-start">TypeScript Quick Start</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="true" tabindex="0">Redux Essentials</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto; will-change: height; transition: height 318ms ease-in-out 0s;"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts">Redux Overview and Concepts</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-2-app-structure">Redux Toolkit App Structure</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-3-data-flow">Basic Redux Data Flow</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-4-using-data">Using Redux Data</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-5-async-logic">Async Logic and Data Fetching</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-6-performance-normalization">Performance and Normalizing Data</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-7-rtk-query-basics">RTK Query Basics</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/essentials/part-8-rtk-query-advanced">RTK Query Advanced Patterns</a></li></ul></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="true" tabindex="0">Redux Fundamentals</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto; will-change: height; transition: height 318ms ease-in-out 0s;"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-1-overview">Redux Overview</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow">Redux Concepts and Data Flow</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers">State, Actions, and Reducers</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-4-store">Store</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-5-ui-react">UI and React</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-6-async-logic">Async Logic and Data Fetching</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-7-standard-patterns">Standard Redux Patterns</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/fundamentals/part-8-modern-redux">Modern Redux with Redux Toolkit</a></li></ul></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/tutorials/videos">Videos</a></li></ul></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret menu__link--active" aria-expanded="true">Using Redux</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto; will-change: height; transition: height 391ms ease-in-out 0s;"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/">Usage Guides Index</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="true" tabindex="0">Setup and Organization</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto;"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/configuring-your-store">Configuring Your Store</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/migrating-to-modern-redux">Migrating to Modern Redux</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/code-splitting">Code Splitting</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/server-rendering">Server Rendering</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/isolating-redux-sub-apps">Isolating Redux Sub-Apps</a></li></ul></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret menu__link--active" aria-expanded="true" tabindex="0">Code Quality</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto;"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link menu__link--active" tabindex="0" href="https://redux.js.org/usage/usage-with-typescript" aria-current="page">Usage With TypeScript</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/writing-tests">Writing Tests</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/troubleshooting">Troubleshooting</a></li></ul></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="true" tabindex="0">Redux Logic and Patterns</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto;"><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-3 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="false" tabindex="0">Structuring Reducers</a></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/reducing-boilerplate">Reducing Boilerplate</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/deriving-data-selectors">Deriving Data with Selectors</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/writing-logic-thunks">Writing Logic with Thunks</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/side-effects-approaches">Side Effects Approaches</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-3 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/usage/implementing-undo-history">Implementing Undo History</a></li></ul></li></ul></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="false">Understanding Redux</a></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="false">FAQ</a></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="false">Style Guide</a></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="false">API Reference</a></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item"><div class="menu__list-item-collapsible"><a href="#" class="menu__link menu__link--sublist menu__link--sublist-caret" aria-expanded="true">Redux Toolkit</a></div><ul class="menu__list" style="display: block; overflow: visible; height: auto; will-change: height; transition: height 190ms ease-in-out 0s;"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="https://redux.js.org/redux-toolkit/overview">Redux Toolkit: Overview</a></li></ul></li></ul></nav></div></aside><main class="docMainContainer_gTbr"><div class="container padding-top--md padding-bottom--lg"><div class="row"><div class="col docItemCol_VOVn"><div class="docItemContainer_Djhp"><article><nav class="theme-doc-breadcrumbs breadcrumbsContainer_Z_bl" aria-label="Breadcrumbs"><ul class="breadcrumbs" itemscope="" itemtype="https://schema.org/BreadcrumbList"><li class="breadcrumbs__item"><a aria-label="Home page" class="breadcrumbs__link" href="https://redux.js.org/"><svg viewBox="0 0 24 24" class="breadcrumbHomeIcon_OVgt"><path d="M10 19v-5h4v5c0 .55.45 1 1 1h3c.55 0 1-.45 1-1v-7h1.7c.46 0 .68-.57.33-.87L12.67 3.6c-.38-.34-.96-.34-1.34 0l-8.36 7.53c-.34.3-.13.87.33.87H5v7c0 .55.45 1 1 1h3c.55 0 1-.45 1-1z" fill="currentColor"></path></svg></a></li><li class="breadcrumbs__item"><span class="breadcrumbs__link">Using Redux</span><meta itemprop="position" content="1"></li><li class="breadcrumbs__item"><span class="breadcrumbs__link">Code Quality</span><meta itemprop="position" content="2"></li><li itemscope="" itemprop="itemListElement" itemtype="https://schema.org/ListItem" class="breadcrumbs__item breadcrumbs__item--active"><span class="breadcrumbs__link" itemprop="name">Usage With TypeScript</span><meta itemprop="position" content="3"></li></ul></nav><div class="tocCollapsible_ETCw theme-doc-toc-mobile tocMobile_ITEo"><button type="button" class="clean-btn tocCollapsibleButton_TO0P">On this page</button></div><div class="theme-doc-markdown markdown"><h1>Usage with TypeScript</h1><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>What You'll Learn</div><div class="admonitionContent_S0QG"><ul class=""><li>Standard patterns for setting up a Redux app with TypeScript</li><li>Techniques for correctly typing portions of Redux logic</li></ul></div></div><div class="theme-admonition theme-admonition-important alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>Prerequisites</div><div class="admonitionContent_S0QG"><ul class=""><li>Understanding of <a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener noreferrer">TypeScript syntax and terms</a></li><li>Familiarity with TypeScript concepts like <a href="https://www.typescriptlang.org/docs/handbook/2/generics.html" target="_blank" rel="noopener noreferrer">generics</a> and <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noopener noreferrer">utility types</a></li><li>Knowledge of <a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener noreferrer">React Hooks</a></li></ul></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a class="hash-link" href="#overview" title="Direct link to heading">​</a></h2><p><strong>TypeScript</strong>
 is a typed superset of JavaScript that provides compile-time checking 
of source code. When used with Redux, TypeScript can help provide:</p><ol><li>Type safety for reducers, state and action creators, and UI components</li><li>Easy refactoring of typed code</li><li>A superior developer experience in a team environment</li></ol><p><a href="https://redux.js.org/style-guide/#use-static-typing"><strong>We strongly recommend using TypeScript in Redux applications</strong></a>.
 However, like all tools, TypeScript has tradeoffs. It adds complexity 
in terms of writing additional code, understanding TS syntax, and 
building the application. At the same time, it provides value by 
catching errors earlier in development, enabling safer and more 
efficient refactoring, and acting as documentation for existing source 
code.</p><p>We believe that <strong><a href="https://blog.isquaredsoftware.com/2019/11/blogged-answers-learning-and-using-typescript/#pragmatism-is-vital" target="_blank" rel="noopener noreferrer">pragmatic use of TypeScript</a> provides more than enough value and benefit to justify the added overhead</strong>, especially in larger codebases, but you should take time to <strong>evaluate the tradeoffs and decide whether it's worth using TS in your own application</strong>.</p><p>There are multiple possible approaches to type checking Redux code. <strong>This page shows our standard recommended patterns for using Redux and TypeScript together</strong>, and is not an exhaustive guide. Following these patterns should result in a good TS usage experience, with <strong>the best tradeoffs between type safety and amount of type declarations you have to add to your codebase</strong>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="standard-redux-toolkit-project-setup-with-typescript">Standard Redux Toolkit Project Setup with TypeScript<a class="hash-link" href="#standard-redux-toolkit-project-setup-with-typescript" title="Direct link to heading">​</a></h2><p>We assume that a typical Redux project is using Redux Toolkit and React Redux together.</p><p><a href="https://redux-toolkit.js.org/" target="_blank" rel="noopener noreferrer">Redux Toolkit</a>
 (RTK) is the standard approach for writing modern Redux logic. RTK is 
already written in TypeScript, and its API is designed to provide a good
 experience for TypeScript usage.</p><p><a href="https://react-redux.js.org/" target="_blank" rel="noopener noreferrer">React Redux</a> has its type definitions in a separate <a href="https://npm.im/@types/react-redux" target="_blank" rel="noopener noreferrer"><code>@types/react-redux</code> typedefs package</a>
 on NPM. In addition to typing the library functions, the types also 
export some helpers to make it easier to write typesafe interfaces 
between your Redux store and your React components.</p><p>As of React Redux v7.2.3, the <code>react-redux</code> package has a dependency on <code>@types/react-redux</code>,
 so the type definitions will be automatically installed with the 
library. Otherwise, you'll need to manually install them yourself 
(typically <code>npm install @types/react-redux</code> ).</p><p>The <a href="https://github.com/reduxjs/cra-template-redux-typescript" target="_blank" rel="noopener noreferrer">Redux+TS template for Create-React-App</a> comes with a working example of these patterns already configured.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-root-state-and-dispatch-types">Define Root State and Dispatch Types<a class="hash-link" href="#define-root-state-and-dispatch-types" title="Direct link to heading">​</a></h3><p>Using <a href="https://redux-toolkit.js.org/api/configureStore" target="_blank" rel="noopener noreferrer">configureStore</a> should not need any additional typings. You will, however, want to extract the <code>RootState</code> type and the <code>Dispatch</code>
 type so that they can be referenced as needed. Inferring these types 
from the store itself means that they correctly update as you add more 
state slices or modify middleware settings.</p><p>Since those are types, it's safe to export them directly from your store setup file such as <code>app/store.ts</code> and import them directly into other files.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockTitle_Ktv7">app/store.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> configureStore </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'@reduxjs/toolkit'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> store </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">configureStore</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducer</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    posts</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> postsReducer</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    comments</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> commentsReducer</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    users</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> usersReducer</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// Infer the `RootState` and `AppDispatch` types from the store itself</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">RootState</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> ReturnType</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token keyword" style="color: rgb(249, 38, 114);">typeof</span><span class="token plain"> store</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">getState</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">AppDispatch</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">typeof</span><span class="token plain"> store</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">dispatch</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-typed-hooks">Define Typed Hooks<a class="hash-link" href="#define-typed-hooks" title="Direct link to heading">​</a></h3><p>While it's possible to import the <code>RootState</code> and <code>AppDispatch</code> types into each component, it's better to <strong>create pre-typed versions of the <code>useDispatch</code> and <code>useSelector</code> hooks for usage in your application</strong>. This is important for a couple reasons:</p><ul class=""><li>For <code>useSelector</code>, it saves you the need to type <code>(state: RootState)</code> every time</li><li>For <code>useDispatch</code>, the default <code>Dispatch</code>
 type does not know about thunks or other middleware. In order to 
correctly dispatch thunks, you need to use the specific customized <code>AppDispatch</code> type from the store that includes the thunk middleware types, and use that with <code>useDispatch</code>. Adding a pre-typed <code>useDispatch</code> hook keeps you from forgetting to import <code>AppDispatch</code> where it's needed.</li></ul><p>Since these are actual variables, not types, it's important to define them in a separate file such as <code>app/hooks.ts</code>,
 not the store setup file. This allows you to import them into any 
component file that needs to use the hooks, and avoids potential 
circular import dependency issues.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockTitle_Ktv7">app/hooks.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> TypedUseSelectorHook</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> useDispatch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> useSelector </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'react-redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> AppDispatch </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'./store'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// Use throughout your app instead of plain `useDispatch` and `useSelector`</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">DispatchFunc</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> AppDispatch</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> useAppDispatch</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> DispatchFunc </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> useDispatch</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> useAppSelector</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> TypedUseSelectorHook</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain">RootState</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> useSelector</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="application-usage">Application Usage<a class="hash-link" href="#application-usage" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-slice-state-and-action-types">Define Slice State and Action Types<a class="hash-link" href="#define-slice-state-and-action-types" title="Direct link to heading">​</a></h3><p>Each slice file should define a type for its initial state value, so that <code>createSlice</code> can correctly infer the type of <code>state</code> in each case reducer.</p><p>All generated actions should be defined using the <code>PayloadAction&lt;T&gt;</code> type from Redux Toolkit, which takes the type of the <code>action.payload</code> field as its generic argument.</p><p>You can safely import the <code>RootState</code>
 type from the store file here. It's a circular import, but the 
TypeScript compiler can correctly handle that for types. This may be 
needed for use cases like writing selector functions.</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockTitle_Ktv7">features/counter/counterSlice.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> createSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> PayloadAction </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'@reduxjs/toolkit'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> RootState </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'../../app/store'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// Define a type for the slice state</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">interface</span><span class="token plain"> </span><span class="token class-name">CounterState</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  value</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// Define the initial state using that type</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token class-name keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> initialState</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> CounterState </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  value</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">0</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> counterSlice </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">createSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  name</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'counter'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// `createSlice` will infer the state type from the `initialState` argument</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  initialState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">increment</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> state </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">value </span><span class="token operator" style="color: rgb(248, 248, 242);">+=</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">1</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">decrement</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> state </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">value </span><span class="token operator" style="color: rgb(248, 248, 242);">-=</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">1</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token comment" style="color: rgb(198, 202, 210);">// Use the PayloadAction type to declare the contents of `action.payload`</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">incrementByAmount</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> action</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> PayloadAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">value </span><span class="token operator" style="color: rgb(248, 248, 242);">+=</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">payload</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> increment</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> decrement</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> incrementByAmount </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> counterSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">actions</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// Other code such as selectors can use the imported `RootState` type</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token class-name keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">selectCount</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">counter</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">default</span><span class="token plain"> counterSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">reducer</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The generated action creators will be correctly typed to accept a <code>payload</code> argument based on the <code>PayloadAction&lt;T&gt;</code> type you provided for the reducer. For example, <code>incrementByAmount</code> requires a <code>number</code> as its argument.</p><p>In some cases, <a href="https://github.com/reduxjs/redux-toolkit/pull/827" target="_blank" rel="noopener noreferrer">TypeScript may unnecessarily tighten the type of the initial state</a>. If that happens, you can work around it by casting the initial state using <code>as</code>, instead of declaring the type of the variable:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token comment" style="color: rgb(198, 202, 210);">// Workaround: cast state instead of declaring variable type</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> initialState </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  value</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">0</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">as</span><span class="token plain"> CounterState</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-typed-hooks-in-components">Use Typed Hooks in Components<a class="hash-link" href="#use-typed-hooks-in-components" title="Direct link to heading">​</a></h3><p>In component files, import the pre-typed hooks instead of the standard hooks from React Redux.</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockTitle_Ktv7">features/counter/Counter.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token imports"> </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token imports"> useState </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'react'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token imports"> useAppSelector</span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token imports"> useAppDispatch </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'app/hooks'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token imports"> decrement</span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token imports"> increment </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'./counterSlice'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">function</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">Counter</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// The `state` arg is correctly typed as `RootState` already</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> count </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">useAppSelector</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state </span><span class="token arrow operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token property-access">counter</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token property-access">value</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> dispatch </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">useAppDispatch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// omit rendering logic</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Warn about wrong imports</div><div class="admonitionContent_S0QG"><p>ESLint can help your team import the right hooks easily. The <a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-restricted-imports.md" target="_blank" rel="noopener noreferrer">typescript-eslint/no-restricted-imports</a> rule can show a warning when the wrong import is used accidentally.</p><p>You could add this to your ESLint config as an example:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token property" style="color: rgb(249, 38, 114);">"no-restricted-imports"</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">"off"</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token property" style="color: rgb(249, 38, 114);">"@typescript-eslint/no-restricted-imports"</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">[</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token string" style="color: rgb(166, 226, 46);">"warn"</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token property" style="color: rgb(249, 38, 114);">"name"</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">"react-redux"</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token property" style="color: rgb(249, 38, 114);">"importNames"</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">[</span><span class="token string" style="color: rgb(166, 226, 46);">"useSelector"</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">"useDispatch"</span><span class="token punctuation" style="color: rgb(248, 248, 242);">]</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token property" style="color: rgb(249, 38, 114);">"message"</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">"Use typed hooks `useAppDispatch` and `useAppSelector` instead."</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">]</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="typing-additional-redux-logic">Typing Additional Redux Logic<a class="hash-link" href="#typing-additional-redux-logic" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="type-checking-reducers">Type Checking Reducers<a class="hash-link" href="#type-checking-reducers" title="Direct link to heading">​</a></h3><p><a href="https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers">Reducers</a> are pure functions that receive the current <code>state</code> and incoming <code>action</code> as arguments, and return a new state.</p><p>If you are using Redux Toolkit's <code>createSlice</code>,
 you should rarely need to specifically type a reducer separately. If 
you do actually write a standalone reducer, it's typically sufficient to
 declare the type of the <code>initialState</code> value, and type the <code>action</code> as <code>AnyAction</code>:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> AnyAction </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">interface</span><span class="token plain"> </span><span class="token class-name">CounterState</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  value</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> initialState</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> CounterState </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  value</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">0</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">default</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">function</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">counterReducer</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  state </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> initialState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  action</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> AnyAction</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// logic here</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>However, the Redux core does export a <code>Reducer&lt;State, Action&gt;</code> type you can use as well.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="type-checking-middleware">Type Checking Middleware<a class="hash-link" href="#type-checking-middleware" title="Direct link to heading">​</a></h3><p><a href="https://redux.js.org/tutorials/fundamentals/part-4-store#middleware">Middleware</a> are an extension mechanism for the Redux store. Middleware are composed into a pipeline that wrap the store's <code>dispatch</code> method, and have access to the store's <code>dispatch</code> and <code>getState</code> methods.</p><p>The Redux core exports a <code>Middleware</code> type that can be used to correctly type a middleware function:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">interface</span><span class="token plain"> </span><span class="token class-name">Middleware</span><span class="token class-name operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  DispatchExt </span><span class="token class-name operator" style="color: rgb(248, 248, 242);">=</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token class-name"> </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// optional override return behavior of `dispatch`</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  </span><span class="token class-name constant" style="color: rgb(249, 38, 114);">S</span><span class="token class-name"> </span><span class="token class-name operator" style="color: rgb(248, 248, 242);">=</span><span class="token class-name"> </span><span class="token class-name builtin" style="color: rgb(166, 226, 46);">any</span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token class-name"> </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// type of the Redux store state</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  </span><span class="token class-name constant" style="color: rgb(249, 38, 114);">D</span><span class="token class-name"> </span><span class="token class-name keyword" style="color: rgb(249, 38, 114);">extends</span><span class="token class-name"> Dispatch </span><span class="token class-name operator" style="color: rgb(248, 248, 242);">=</span><span class="token class-name"> Dispatch </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// type of the dispatch method</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name"></span><span class="token class-name operator" style="color: rgb(248, 248, 242);">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>A custom middleware should use the <code>Middleware</code> type, and pass the generic args for <code>S</code> (state) and <code>D</code> (dispatch) if needed:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> Middleware </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> RootState </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'../store'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> exampleMiddleware</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> Middleware</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token comment" style="color: rgb(198, 202, 210);">// Most middleware do not modify the dispatch return value</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  RootState</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> storeApi </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> next </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> action </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> state </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> storeApi</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">getState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token comment" style="color: rgb(198, 202, 210);">// correctly typed as RootState</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The dispatch generic should likely only be needed if you are dispatching additional thunks within the middleware.</p><p>In cases where <code>type RootState = ReturnType&lt;typeof store.getState&gt;</code> is used, a <a href="https://github.com/reduxjs/redux/issues/4267" target="_blank" rel="noopener noreferrer">circular type reference between the middleware and store definitions</a> can be avoided by switching the type definition of <code>RootState</code> to:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> rootReducer </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">combineReducers</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">...</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">RootState</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> ReturnType</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token keyword" style="color: rgb(249, 38, 114);">typeof</span><span class="token plain"> rootReducer</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Switching the type definition of <code>RootState</code> with Redux Toolkit example:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token comment" style="color: rgb(198, 202, 210);">//instead of defining the reducers in the reducer field of configureStore, combine them here:</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> rootReducer </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">combineReducers</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> counter</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> counterReducer </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">//then set rootReducer as the reducer object of configureStore</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> store </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">configureStore</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducer</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> rootReducer</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">middleware</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> getDefaultMiddleware </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function" style="color: rgb(230, 216, 116);">getDefaultMiddleware</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">concat</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">yourMiddleware</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">RootState</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> ReturnType</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token keyword" style="color: rgb(249, 38, 114);">typeof</span><span class="token plain"> rootReducer</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="type-checking-redux-thunks">Type Checking Redux Thunks<a class="hash-link" href="#type-checking-redux-thunks" title="Direct link to heading">​</a></h3><p><a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener noreferrer">Redux Thunk</a> is the standard middleware for writing sync and async logic that interacts with the Redux store. A thunk function receives <code>dispatch</code> and <code>getState</code> as its parameters. Redux Thunk has a built in <code>ThunkAction</code> type which we can use to define types for those arguments:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">ThunkAction</span><span class="token class-name operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  </span><span class="token class-name constant" style="color: rgb(249, 38, 114);">R</span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token class-name"> </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// Return type of the thunk function</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  </span><span class="token class-name constant" style="color: rgb(249, 38, 114);">S</span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token class-name"> </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// state type used by getState</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  </span><span class="token class-name constant" style="color: rgb(249, 38, 114);">E</span><span class="token class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token class-name"> </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// any "extra argument" injected into the thunk</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name">  </span><span class="token class-name constant" style="color: rgb(249, 38, 114);">A</span><span class="token class-name"> </span><span class="token class-name keyword" style="color: rgb(249, 38, 114);">extends</span><span class="token class-name"> Action </span><span class="token class-name comment" style="color: rgb(198, 202, 210);">// known types of actions that can be dispatched</span><span class="token class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token class-name"></span><span class="token class-name operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">dispatch</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> ThunkDispatch</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token constant" style="color: rgb(249, 38, 114);">S</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token constant" style="color: rgb(249, 38, 114);">E</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token constant" style="color: rgb(249, 38, 114);">A</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">getState</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color: rgb(249, 38, 114);">S</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> extraArgument</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token constant" style="color: rgb(249, 38, 114);">E</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color: rgb(249, 38, 114);">R</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You will typically want to provide the <code>R</code> (return type) and <code>S</code> (state) generic arguments. Unfortunately, TS does not allow only providing <em>some</em> generic arguments, so the usual values for the other arguments are <code>unknown</code> for <code>E</code> and <code>AnyAction</code> for <code>A</code>:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> AnyAction </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> sendMessage </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'./store/chat/actions'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> RootState </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'./store'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> ThunkAction </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'redux-thunk'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> thunkSendMessage </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">message</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">string</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> ThunkAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token keyword" style="color: rgb(249, 38, 114);">void</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">unknown</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> AnyAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">async</span><span class="token plain"> dispatch </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> asyncResp </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">await</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">exampleAPI</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function" style="color: rgb(230, 216, 116);">dispatch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token function" style="color: rgb(230, 216, 116);">sendMessage</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        message</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        user</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> asyncResp</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        timestamp</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">getTime</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">function</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">exampleAPI</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">return</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">Promise</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">resolve</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token string" style="color: rgb(166, 226, 46);">'Async Chat Bot'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To reduce repetition, you might want to define a reusable <code>AppThunk</code> type once, in your store file, and then use that type whenever you write a thunk:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">AppThunk</span><span class="token class-name operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token class-name">ReturnType </span><span class="token class-name operator" style="color: rgb(248, 248, 242);">=</span><span class="token class-name"> </span><span class="token class-name keyword" style="color: rgb(249, 38, 114);">void</span><span class="token class-name operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> ThunkAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  ReturnType</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token builtin" style="color: rgb(166, 226, 46);">unknown</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  AnyAction</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note that this assumes that there is no meaningful return value from the thunk. If your thunk returns a promise and you want to <a href="https://redux.js.org/tutorials/essentials/part-5-async-logic#checking-thunk-results-in-components">use the returned promise after dispatching the thunk</a>, you'd want to use this as <code>AppThunk&lt;Promise&lt;SomeReturnType&gt;&gt;</code>.</p><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>Don't forget that <strong>the default <code>useDispatch</code> hook does not know about thunks</strong>, and so dispatching a thunk will cause a type error. Be sure to <a href="#define-root-state-and-dispatch-types">use an updated form of <code>Dispatch</code> in your components that recognizes thunks as an acceptable type to dispatch</a>.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="usage-with-react-redux">Usage with React Redux<a class="hash-link" href="#usage-with-react-redux" title="Direct link to heading">​</a></h2><p>While <a href="https://react-redux.js.org/" target="_blank" rel="noopener noreferrer">React Redux</a> is a separate library from Redux itself, it is commonly used with React.</p><p>For a complete guide on how to correctly use React Redux with TypeScript, see <strong><a href="https://react-redux.js.org/using-react-redux/static-typing" target="_blank" rel="noopener noreferrer">the "Static Typing" page in the React Redux docs</a></strong>. This section will highlight the standard patterns.</p><p>If
 you are using TypeScript, the React Redux types are maintained 
separately in DefinitelyTyped, but included as a dependency of the 
react-redux package, so they should be installed automatically. If you 
still need to install them manually, run:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">npm install @types/react-redux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-the-useselector-hook">Typing the <code>useSelector</code> hook<a class="hash-link" href="#typing-the-useselector-hook" title="Direct link to heading">​</a></h3><p>Declare the type of the <code>state</code> parameter in the selector function, and the return type of <code>useSelector</code> will be inferred to match the return type of the selector:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">interface</span><span class="token plain"> </span><span class="token class-name">RootState</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  isOn</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">boolean</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// TS infers type: (state: RootState) =&gt; boolean</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">selectIsOn</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">isOn</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// TS infers `isOn` is boolean</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> isOn </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">useSelector</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">selectIsOn</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This can also be done inline as well:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> isOn </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">useSelector</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">isOn</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>However, prefer creating a pre-typed <code>useAppSelector</code> hook with the correct type of <code>state</code> built-in instead.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-the-usedispatch-hook">Typing the <code>useDispatch</code> hook<a class="hash-link" href="#typing-the-usedispatch-hook" title="Direct link to heading">​</a></h3><p>By default, the return value of <code>useDispatch</code> is the standard <code>Dispatch</code> type defined by the Redux core types, so no declarations are needed:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> dispatch </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">useDispatch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>However, prefer creating a pre-typed <code>useAppDispatch</code> hook with the correct type of <code>Dispatch</code> built-in instead.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-the-connect-higher-order-component">Typing the <code>connect</code> higher order component<a class="hash-link" href="#typing-the-connect-higher-order-component" title="Direct link to heading">​</a></h3><p>If you are still using <code>connect</code>, you should use the <code>ConnectedProps&lt;T&gt;</code> type exported by <code>@types/react-redux^7.1.2</code> to infer the types of the props from <code>connect</code> automatically. This requires splitting the <code>connect(mapState, mapDispatch)(MyComponent)</code> call into two parts:</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token imports"> connect</span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">ConnectedProps</span><span class="token imports"> </span><span class="token imports punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">from</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'react-redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">interface</span><span class="token plain"> </span><span class="token class-name">RootState</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  isOn</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">boolean</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">mapState</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token maybe-class-name">RootState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token arrow operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  isOn</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token property-access">isOn</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> mapDispatch </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">toggleOn</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token arrow operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> type</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'TOGGLE_IS_ON'</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> connector </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">connect</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">mapState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> mapDispatch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// The inferred type will look like:</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// {isOn: boolean, toggleOn: () =&gt; void}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">PropsFromRedux</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token maybe-class-name">ConnectedProps</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token keyword" style="color: rgb(249, 38, 114);">typeof</span><span class="token plain"> connector</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">Props</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token maybe-class-name">PropsFromRedux</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  backgroundColor</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">string</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">MyComponent</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">props</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token maybe-class-name">Props</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token arrow operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&lt;</span><span class="token tag" style="color: rgb(249, 38, 114);">div</span><span class="token tag" style="color: rgb(249, 38, 114);"> </span><span class="token tag attr-name" style="color: rgb(166, 226, 46);">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color: rgb(248, 248, 242);">=</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token tag script language-javascript" style="color: rgb(249, 38, 114);"> backgroundColor</span><span class="token tag script language-javascript operator" style="color: rgb(248, 248, 242);">:</span><span class="token tag script language-javascript" style="color: rgb(249, 38, 114);"> props</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token tag script language-javascript property-access" style="color: rgb(249, 38, 114);">backgroundColor</span><span class="token tag script language-javascript" style="color: rgb(249, 38, 114);"> </span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain-text">    </span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&lt;</span><span class="token tag" style="color: rgb(249, 38, 114);">button</span><span class="token tag" style="color: rgb(249, 38, 114);"> </span><span class="token tag attr-name" style="color: rgb(166, 226, 46);">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color: rgb(248, 248, 242);">=</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token tag script language-javascript" style="color: rgb(249, 38, 114);">props</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token tag script language-javascript property-access" style="color: rgb(249, 38, 114);">toggleOn</span><span class="token tag script language-javascript punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain-text">      Toggle is </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain">props</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token property-access">isOn</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">?</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'ON'</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'OFF'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain-text">    </span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&lt;/</span><span class="token tag" style="color: rgb(249, 38, 114);">button</span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain-text">  </span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&lt;/</span><span class="token tag" style="color: rgb(249, 38, 114);">div</span><span class="token tag punctuation" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">default</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">connector</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token maybe-class-name">MyComponent</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="usage-with-redux-toolkit">Usage with Redux Toolkit<a class="hash-link" href="#usage-with-redux-toolkit" title="Direct link to heading">​</a></h2><p>The <a href="#standard-redux-toolkit-project-setup-with-typescript">Standard Redux Toolkit Project Setup with TypeScript</a> section already covered the normal usage patterns for <code>configureStore</code> and <code>createSlice</code>, and the <a href="https://redux-toolkit.js.org/usage/usage-with-typescript" target="_blank" rel="noopener noreferrer">Redux Toolkit "Usage with TypeScript" page</a> covers all of the RTK APIs in detail.</p><p>Here are some additional typing patterns you will commonly see when using RTK.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-configurestore">Typing <code>configureStore</code><a class="hash-link" href="#typing-configurestore" title="Direct link to heading">​</a></h3><p><code>configureStore</code> infers the type of the state value from the provided root reducer function, so no specific type declarations should be needed.</p><p>If you want to add additional middleware to the store, be sure to use the specialized <code>.concat()</code> and <code>.prepend()</code> methods included in the array returned by <code>getDefaultMiddleware()</code>,
 as those will correctly preserve the types of the middleware you're 
adding. (Using plain JS array spreads often loses those types.)</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> store </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">configureStore</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducer</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> rootReducer</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">middleware</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> getDefaultMiddleware </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function" style="color: rgb(230, 216, 116);">getDefaultMiddleware</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">prepend</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        </span><span class="token comment" style="color: rgb(198, 202, 210);">// correctly typed middlewares can just be used</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        additionalMiddleware</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        </span><span class="token comment" style="color: rgb(198, 202, 210);">// you can also type middlewares manually</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        untypedMiddleware </span><span class="token keyword" style="color: rgb(249, 38, 114);">as</span><span class="token plain"> Middleware</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">          </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">action</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> Action</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token string" style="color: rgb(166, 226, 46);">'specialAction'</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">          RootState</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">        </span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token comment" style="color: rgb(198, 202, 210);">// prepend and concat calls can be chained</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">concat</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">logger</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="matching-actions">Matching Actions<a class="hash-link" href="#matching-actions" title="Direct link to heading">​</a></h3><p>RTK-generated action creators have a <code>match</code> method that acts as a <a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" target="_blank" rel="noopener noreferrer">type predicate</a>. Calling <code>someActionCreator.match(action)</code> will do a string comparison against the <code>action.type</code> string, and if used as a condition, narrow the type of <code>action</code> down to be the correct TS type:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> increment </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token generic-function function" style="color: rgb(230, 216, 116);">createAction</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token generic-function generic class-name builtin" style="color: rgb(166, 226, 46);">number</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token string" style="color: rgb(166, 226, 46);">'increment'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">function</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">test</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">action</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> Action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">if</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">increment</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">match</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token comment" style="color: rgb(198, 202, 210);">// action.payload inferred correctly here</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> num </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">5</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">+</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">payload</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is particularly useful when checking for action types in Redux middleware, such as custom middleware, <code>redux-observable</code>, and RxJS's <code>filter</code> method.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-createslice">Typing <code>createSlice</code><a class="hash-link" href="#typing-createslice" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="defining-separate-case-reducers">Defining Separate Case Reducers<a class="hash-link" href="#defining-separate-case-reducers" title="Direct link to heading">​</a></h4><p>If
 you have too many case reducers and defining them inline would be 
messy, or you want to reuse case reducers across slices, you can also 
define them outside the <code>createSlice</code> call and type them as <code>CaseReducer</code>:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">type</span><span class="token plain"> </span><span class="token class-name">State</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> increment</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> CaseReducer</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain">State</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> PayloadAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;&gt;</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  state </span><span class="token operator" style="color: rgb(248, 248, 242);">+</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">payload</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token function" style="color: rgb(230, 216, 116);">createSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  name</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'test'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  initialState</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token number" style="color: rgb(174, 129, 255);">0</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    increment</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="typing-extrareducers">Typing <code>extraReducers</code><a class="hash-link" href="#typing-extrareducers" title="Direct link to heading">​</a></h4><p>If you are adding an <code>extraReducers</code> field in <code>createSlice</code>,
 be sure to use the "builder callback" form, as the "plain object" form 
cannot infer action types correctly. Passing an RTK-generated action 
creator to <code>builder.addCase()</code> will correctly infer the type of the <code>action</code>:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> usersSlice </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">createSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  name</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'users'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  initialState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token comment" style="color: rgb(198, 202, 210);">// fill in primary logic here</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">extraReducers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> builder </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    builder</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">addCase</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">fetchUserById</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">pending</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token comment" style="color: rgb(198, 202, 210);">// both `state` and `action` are now correctly typed</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token comment" style="color: rgb(198, 202, 210);">// based on the slice state and the `pending` action creator</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="typing-prepare-callbacks">Typing <code>prepare</code> Callbacks<a class="hash-link" href="#typing-prepare-callbacks" title="Direct link to heading">​</a></h4><p>If you want to add a <code>meta</code> or <code>error</code> property to your action, or customize the <code>payload</code> of your action, you have to use the <code>prepare</code> notation for defining the case reducer. Using this notation with TypeScript looks like:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> blogSlice </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">createSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  name</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'blogData'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  initialState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    receivedAll</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token function" style="color: rgb(230, 216, 116);">reducer</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">        state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">        action</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> PayloadAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain">Page</span><span class="token punctuation" style="color: rgb(248, 248, 242);">[</span><span class="token punctuation" style="color: rgb(248, 248, 242);">]</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">string</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> currentPage</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">        state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">all </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">payload</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">        state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">meta </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">meta</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token function" style="color: rgb(230, 216, 116);">prepare</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">payload</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> Page</span><span class="token punctuation" style="color: rgb(248, 248, 242);">[</span><span class="token punctuation" style="color: rgb(248, 248, 242);">]</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> currentPage</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">        </span><span class="token keyword" style="color: rgb(249, 38, 114);">return</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> payload</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> meta</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> currentPage </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">      </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="fixing-circular-types-in-exported-slices">Fixing Circular Types in Exported Slices<a class="hash-link" href="#fixing-circular-types-in-exported-slices" title="Direct link to heading">​</a></h4><p>Finally,
 on rare occasions you might need to export the slice reducer with a 
specific type in order to break a circular type dependency problem. This
 might look like:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">export</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">default</span><span class="token plain"> counterSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">reducer </span><span class="token keyword" style="color: rgb(249, 38, 114);">as</span><span class="token plain"> Reducer</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token plain">Counter</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-createasyncthunk">Typing <code>createAsyncThunk</code><a class="hash-link" href="#typing-createasyncthunk" title="Direct link to heading">​</a></h3><p>For basic usage, the only type you need to provide for <code>createAsyncThunk</code>
 is the type of the single argument for your payload creation callback. 
You should also ensure that the return value of the callback is typed 
correctly:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> fetchUserById </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">createAsyncThunk</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token string" style="color: rgb(166, 226, 46);">'users/fetchById'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// Declare the type your function argument here:</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">async</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">userId</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> response </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">await</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">fetch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token template-string template-punctuation string" style="color: rgb(166, 226, 46);">`</span><span class="token template-string string" style="color: rgb(166, 226, 46);">https://reqres.in/api/users/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color: rgb(248, 248, 242);">${</span><span class="token template-string interpolation">userId</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token template-string template-punctuation string" style="color: rgb(166, 226, 46);">`</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token comment" style="color: rgb(198, 202, 210);">// Inferred return type: Promise&lt;MyData&gt;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token keyword" style="color: rgb(249, 38, 114);">return</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token keyword" style="color: rgb(249, 38, 114);">await</span><span class="token plain"> response</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">json</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">as</span><span class="token plain"> MyData</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// the parameter of `fetchUserById` is automatically inferred to `number` here</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// and dispatching the resulting thunkAction will return a Promise of a correctly</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token comment" style="color: rgb(198, 202, 210);">// typed "fulfilled" or "rejected" action.</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> lastReturnedAction </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">await</span><span class="token plain"> store</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">dispatch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token function" style="color: rgb(230, 216, 116);">fetchUserById</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token number" style="color: rgb(174, 129, 255);">3</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If you need to modify the types of the <code>thunkApi</code> parameter, such as supplying the type of the <code>state</code> returned by <code>getState()</code>,
 you must supply the first two generic arguments for return type and 
payload argument, plus whicher "thunkApi argument fields" are relevant 
in an object:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> fetchUserById </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token generic-function function" style="color: rgb(230, 216, 116);">createAsyncThunk</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name comment" style="color: rgb(198, 202, 210);">// Return type of the payload creator</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">  MyData</span><span class="token generic-function generic class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name comment" style="color: rgb(198, 202, 210);">// First argument to the payload creator</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name builtin" style="color: rgb(166, 226, 46);">number</span><span class="token generic-function generic class-name punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">    </span><span class="token generic-function generic class-name comment" style="color: rgb(198, 202, 210);">// Optional fields for defining thunkApi field types</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">    dispatch</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">:</span><span class="token generic-function generic class-name"> AppDispatch</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">    state</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">:</span><span class="token generic-function generic class-name"> State</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">    extra</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">:</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">      jwt</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">:</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name builtin" style="color: rgb(166, 226, 46);">string</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">    </span><span class="token generic-function generic class-name punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token generic-function generic class-name"></span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token string" style="color: rgb(166, 226, 46);">'users/fetchById'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">async</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">userId</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> thunkApi</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> response </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">await</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">fetch</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token template-string template-punctuation string" style="color: rgb(166, 226, 46);">`</span><span class="token template-string string" style="color: rgb(166, 226, 46);">https://reqres.in/api/users/</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color: rgb(248, 248, 242);">${</span><span class="token template-string interpolation">userId</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token template-string template-punctuation string" style="color: rgb(166, 226, 46);">`</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    headers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      Authorization</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color: rgb(166, 226, 46);">`</span><span class="token template-string string" style="color: rgb(166, 226, 46);">Bearer </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color: rgb(248, 248, 242);">${</span><span class="token template-string interpolation">thunkApi</span><span class="token template-string interpolation punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token template-string interpolation">extra</span><span class="token template-string interpolation punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token template-string interpolation">jwt</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token template-string template-punctuation string" style="color: rgb(166, 226, 46);">`</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token keyword" style="color: rgb(249, 38, 114);">return</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token keyword" style="color: rgb(249, 38, 114);">await</span><span class="token plain"> response</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">json</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token keyword" style="color: rgb(249, 38, 114);">as</span><span class="token plain"> MyData</span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typing-createentityadapter">Typing <code>createEntityAdapter</code><a class="hash-link" href="#typing-createentityadapter" title="Direct link to heading">​</a></h3><p>Typing <code>createEntityAdapter</code> only requires you to specify the entity type as the single generic argument. This typically looks like:</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color: #f8f8f2; --prism-background-color: #272822;"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token keyword" style="color: rgb(249, 38, 114);">interface</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  bookId</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">number</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  title</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token builtin" style="color: rgb(166, 226, 46);">string</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> booksAdapter </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token generic-function function" style="color: rgb(230, 216, 116);">createEntityAdapter</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token generic-function generic class-name">Book</span><span class="token generic-function generic class-name operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">selectId</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> book </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> book</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">bookId</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token function-variable function" style="color: rgb(230, 216, 116);">sortComparer</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">a</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> b</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token operator" style="color: rgb(248, 248, 242);">=&gt;</span><span class="token plain"> a</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">title</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">localeCompare</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">b</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">title</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain" style="display: inline-block;"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token keyword" style="color: rgb(249, 38, 114);">const</span><span class="token plain"> booksSlice </span><span class="token operator" style="color: rgb(248, 248, 242);">=</span><span class="token plain"> </span><span class="token function" style="color: rgb(230, 216, 116);">createSlice</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  name</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token string" style="color: rgb(166, 226, 46);">'books'</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token comment" style="color: rgb(198, 202, 210);">// The type of the state is inferred here</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color: rgb(248, 248, 242);"><span class="token plain">  initialState</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> booksAdapter</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">getInitialState</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  reducers</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    bookAdded</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> booksAdapter</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">addOne</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token function" style="color: rgb(230, 216, 116);">booksReceived</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> action</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> PayloadAction</span><span class="token operator" style="color: rgb(248, 248, 242);">&lt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"> books</span><span class="token operator" style="color: rgb(248, 248, 242);">:</span><span class="token plain"> Book</span><span class="token punctuation" style="color: rgb(248, 248, 242);">[</span><span class="token punctuation" style="color: rgb(248, 248, 242);">]</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token operator" style="color: rgb(248, 248, 242);">&gt;</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"> </span><span class="token punctuation" style="color: rgb(248, 248, 242);">{</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">      booksAdapter</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token function" style="color: rgb(230, 216, 116);">setAll</span><span class="token punctuation" style="color: rgb(248, 248, 242);">(</span><span class="token plain">state</span><span class="token punctuation" style="color: rgb(248, 248, 242);">,</span><span class="token plain"> action</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">payload</span><span class="token punctuation" style="color: rgb(248, 248, 242);">.</span><span class="token plain">books</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">    </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain">  </span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token plain"></span><br></span><span class="token-line" style="color: rgb(248, 248, 242);"><span class="token plain"></span><span class="token punctuation" style="color: rgb(248, 248, 242);">}</span><span class="token punctuation" style="color: rgb(248, 248, 242);">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="additional-recommendations">Additional Recommendations<a class="hash-link" href="#additional-recommendations" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-the-react-redux-hooks-api">Use the React Redux Hooks API<a class="hash-link" href="#use-the-react-redux-hooks-api" title="Direct link to heading">​</a></h3><p><strong>We recommend using the React Redux hooks API as the default approach</strong>. The hooks API is much simpler to use with TypeScript, as <code>useSelector</code> is a simple hook that takes a selector function, and the return type is easily inferred from the type of the <code>state</code> argument.</p><p>While <code>connect</code> still works fine, and <em>can</em> be typed, it's much more difficult to type correctly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="avoid-action-type-unions">Avoid Action Type Unions<a class="hash-link" href="#avoid-action-type-unions" title="Direct link to heading">​</a></h3><p><strong>We specifically recommend <em>against</em> trying to create unions of action types</strong>, as it provides no real benefit and actually misleads the compiler in some ways. See RTK maintainer Lenz Weber's post <a href="https://phryneas.de/redux-typescript-no-discriminating-union" target="_blank" rel="noopener noreferrer">Do Not Create Union Types with Redux Action Types</a> for an explanation of why this is a problem.</p><p>In addition, if you're using <code>createSlice</code>, you already know that all actions defined by that slice are being handled correctly.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a class="hash-link" href="#resources" title="Direct link to heading">​</a></h2><p>For further information, see these additional resources:</p><ul class=""><li>Redux library documentation:<ul class=""><li><a href="https://react-redux.js.org/using-react-redux/static-typing" target="_blank" rel="noopener noreferrer">React Redux docs: Static Typing</a>: Examples of how to use the React Redux APIs with TypeScript</li><li><a href="https://redux-toolkit.js.org/usage/usage-with-typescript" target="_blank" rel="noopener noreferrer">Redux Toolkit docs: Usage with TypeScript</a>: Examples of how to use the Redux Toolkit APIs with TypeScript</li></ul></li><li>React + Redux + TypeScript guides:<ul class=""><li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet" target="_blank" rel="noopener noreferrer">React+TypeScript Cheatsheet</a>: a comprehensive guide to using React with TypeScript</li><li><a href="https://github.com/piotrwitek/react-redux-typescript-guide" target="_blank" rel="noopener noreferrer">React + Redux in TypeScript Guide</a>: extensive information on patterns for using React and Redux with TypeScript<ul class=""><li><em>Note:
 while this guide has some useful info, many of the patterns it shows go
 against our recommended practices shown in this page, such as using 
action type unions. We link this out of completeness</em></li></ul></li></ul></li><li>Other articles:<ul class=""><li><a href="https://phryneas.de/redux-typescript-no-discriminating-union" target="_blank" rel="noopener noreferrer">Do Not Create Union Types with Redux Action Types</a></li><li><a href="https://www.matthewgerstman.com/tech/redux-code-split-typecheck/" target="_blank" rel="noopener noreferrer">Redux with Code-Splitting and Type Checking</a></li></ul></li></ul></div><footer class="theme-doc-footer docusaurus-mt-lg"><div class="theme-doc-footer-edit-meta-row row"><div class="col"><a href="https://github.com/reduxjs/redux/edit/master/docs/usage/UsageWithTypescript.md" target="_blank" rel="noreferrer noopener" class="theme-edit-this-page"><svg fill="currentColor" height="20" width="20" viewBox="0 0 40 40" class="iconEdit_Z9Sw" aria-hidden="true"><g><path d="m34.5 11.7l-3 3.1-6.3-6.3 3.1-3q0.5-0.5 1.2-0.5t1.1 0.5l3.9 3.9q0.5 0.4 0.5 1.1t-0.5 1.2z m-29.5 17.1l18.4-18.5 6.3 6.3-18.4 18.4h-6.3v-6.2z"></path></g></svg>Edit this page</a></div><div class="col lastUpdated_vwxv"><span class="theme-last-updated">Last updated on <b><time datetime="2023-01-10T18:44:36.000Z">Jan 10, 2023</time></b></span></div></div></footer></article><nav class="pagination-nav docusaurus-mt-lg" aria-label="Docs pages navigation"><a class="pagination-nav__link pagination-nav__link--prev" href="https://redux.js.org/usage/isolating-redux-sub-apps"><div class="pagination-nav__sublabel">Previous</div><div class="pagination-nav__label">Isolating Redux Sub-Apps</div></a><a class="pagination-nav__link pagination-nav__link--next" href="https://redux.js.org/usage/writing-tests"><div class="pagination-nav__sublabel">Next</div><div class="pagination-nav__label">Writing Tests</div></a></nav></div></div><div class="col col--3"><div class="tableOfContents_bqdL thin-scrollbar theme-doc-toc-desktop"><ul class="table-of-contents table-of-contents__left-border"><li><a href="#overview" class="table-of-contents__link toc-highlight">Overview</a></li><li><a href="#standard-redux-toolkit-project-setup-with-typescript" class="table-of-contents__link toc-highlight">Standard Redux Toolkit Project Setup with TypeScript</a><ul><li><a href="#define-root-state-and-dispatch-types" class="table-of-contents__link toc-highlight table-of-contents__link--active">Define Root State and Dispatch Types</a></li><li><a href="#define-typed-hooks" class="table-of-contents__link toc-highlight">Define Typed Hooks</a></li></ul></li><li><a href="#application-usage" class="table-of-contents__link toc-highlight">Application Usage</a><ul><li><a href="#define-slice-state-and-action-types" class="table-of-contents__link toc-highlight">Define Slice State and Action Types</a></li><li><a href="#use-typed-hooks-in-components" class="table-of-contents__link toc-highlight">Use Typed Hooks in Components</a></li></ul></li><li><a href="#typing-additional-redux-logic" class="table-of-contents__link toc-highlight">Typing Additional Redux Logic</a><ul><li><a href="#type-checking-reducers" class="table-of-contents__link toc-highlight">Type Checking Reducers</a></li><li><a href="#type-checking-middleware" class="table-of-contents__link toc-highlight">Type Checking Middleware</a></li><li><a href="#type-checking-redux-thunks" class="table-of-contents__link toc-highlight">Type Checking Redux Thunks</a></li></ul></li><li><a href="#usage-with-react-redux" class="table-of-contents__link toc-highlight">Usage with React Redux</a><ul><li><a href="#typing-the-useselector-hook" class="table-of-contents__link toc-highlight">Typing the <code>useSelector</code> hook</a></li><li><a href="#typing-the-usedispatch-hook" class="table-of-contents__link toc-highlight">Typing the <code>useDispatch</code> hook</a></li><li><a href="#typing-the-connect-higher-order-component" class="table-of-contents__link toc-highlight">Typing the <code>connect</code> higher order component</a></li></ul></li><li><a href="#usage-with-redux-toolkit" class="table-of-contents__link toc-highlight">Usage with Redux Toolkit</a><ul><li><a href="#typing-configurestore" class="table-of-contents__link toc-highlight">Typing <code>configureStore</code></a></li><li><a href="#matching-actions" class="table-of-contents__link toc-highlight">Matching Actions</a></li><li><a href="#typing-createslice" class="table-of-contents__link toc-highlight">Typing <code>createSlice</code></a></li><li><a href="#typing-createasyncthunk" class="table-of-contents__link toc-highlight">Typing <code>createAsyncThunk</code></a></li><li><a href="#typing-createentityadapter" class="table-of-contents__link toc-highlight">Typing <code>createEntityAdapter</code></a></li></ul></li><li><a href="#additional-recommendations" class="table-of-contents__link toc-highlight">Additional Recommendations</a><ul><li><a href="#use-the-react-redux-hooks-api" class="table-of-contents__link toc-highlight">Use the React Redux Hooks API</a></li><li><a href="#avoid-action-type-unions" class="table-of-contents__link toc-highlight">Avoid Action Type Unions</a></li></ul></li><li><a href="#resources" class="table-of-contents__link toc-highlight">Resources</a></li></ul></div></div></div></div></main></div></div><footer class="footer"><div class="container container-fluid"><div class="row footer__links"><div class="col footer__col"><div class="footer__title">Docs</div><ul class="footer__items clean-list"><li class="footer__item"><a class="footer__link-item" href="https://redux.js.org/introduction/getting-started">Getting Started</a></li><li class="footer__item"><a class="footer__link-item" type="doc" href="https://redux.js.org/usage">Usage Guide</a></li><li class="footer__item"><a class="footer__link-item" href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts">Tutorial</a></li><li class="footer__item"><a class="footer__link-item" href="https://redux.js.org/faq">FAQ</a></li><li class="footer__item"><a class="footer__link-item" type="doc" href="https://redux.js.org/api/api-reference">API Reference</a></li></ul></div><div class="col footer__col"><div class="footer__title">Community</div><ul class="footer__items clean-list"><li class="footer__item"><a href="https://discord.gg/0ZcbPKXt5bZ6au5t" target="_blank" rel="noopener noreferrer" class="footer__link-item">Reactiflux Discord<svg width="13.5" height="13.5" aria-hidden="true" viewBox="0 0 24 24" class="iconExternalLink_nPIU"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></svg></a></li><li class="footer__item"><a href="http://stackoverflow.com/questions/tagged/redux" target="_blank" rel="noopener noreferrer" class="footer__link-item">Stack Overflow<svg width="13.5" height="13.5" aria-hidden="true" viewBox="0 0 24 24" class="iconExternalLink_nPIU"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></svg></a></li><li class="footer__item"><a class="footer__link-item" href="https://redux.js.org/introduction/getting-started#help-and-discussion">Feedback</a></li></ul></div><div class="col footer__col"><div class="footer__title">More</div><ul class="footer__items clean-list"><li class="footer__item"><a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener noreferrer" class="footer__link-item">GitHub<svg width="13.5" height="13.5" aria-hidden="true" viewBox="0 0 24 24" class="iconExternalLink_nPIU"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></svg></a></li><li class="footer__item">
                <a href="https://www.netlify.com/">
                  <img src="Usage%20With%20TypeScript%20Redux_files/netlify-color-accent.svg" alt="Deployed by Netlify">
                </a>
              </li></ul></div></div><div class="footer__bottom text--center"><div class="margin-bottom--sm"><a href="https://redux.js.org/" rel="noopener noreferrer" class="footerLogoLink_BH7S"><img src="Usage%20With%20TypeScript%20Redux_files/redux.svg" alt="Redux Logo" class="themedImage_ToTc themedImage--light_HNdA footer__logo"></a></div><div class="footer__copyright">Copyright © 2015–2023 Dan Abramov and the Redux documentation authors.</div></div></div></footer></div>
<script src="Usage%20With%20TypeScript%20Redux_files/runtime~main.c942408f.js"></script>
<script src="Usage%20With%20TypeScript%20Redux_files/main.aecab9b3.js"></script>

</body></html>